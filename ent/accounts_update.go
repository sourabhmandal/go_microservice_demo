// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gomicro/ent/accounts"
	"gomicro/ent/predicate"
	"gomicro/ent/transfers"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountsUpdate is the builder for updating Accounts entities.
type AccountsUpdate struct {
	config
	hooks    []Hook
	mutation *AccountsMutation
}

// Where appends a list predicates to the AccountsUpdate builder.
func (au *AccountsUpdate) Where(ps ...predicate.Accounts) *AccountsUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetOwner sets the "owner" field.
func (au *AccountsUpdate) SetOwner(s string) *AccountsUpdate {
	au.mutation.SetOwner(s)
	return au
}

// SetBalance sets the "balance" field.
func (au *AccountsUpdate) SetBalance(i int64) *AccountsUpdate {
	au.mutation.ResetBalance()
	au.mutation.SetBalance(i)
	return au
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (au *AccountsUpdate) SetNillableBalance(i *int64) *AccountsUpdate {
	if i != nil {
		au.SetBalance(*i)
	}
	return au
}

// AddBalance adds i to the "balance" field.
func (au *AccountsUpdate) AddBalance(i int64) *AccountsUpdate {
	au.mutation.AddBalance(i)
	return au
}

// SetCurrency sets the "currency" field.
func (au *AccountsUpdate) SetCurrency(s string) *AccountsUpdate {
	au.mutation.SetCurrency(s)
	return au
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (au *AccountsUpdate) SetNillableCurrency(s *string) *AccountsUpdate {
	if s != nil {
		au.SetCurrency(*s)
	}
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AccountsUpdate) SetCreatedAt(t time.Time) *AccountsUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AccountsUpdate) SetNillableCreatedAt(t *time.Time) *AccountsUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// AddFromAccountIDIDs adds the "from_account_id" edge to the Transfers entity by IDs.
func (au *AccountsUpdate) AddFromAccountIDIDs(ids ...int) *AccountsUpdate {
	au.mutation.AddFromAccountIDIDs(ids...)
	return au
}

// AddFromAccountID adds the "from_account_id" edges to the Transfers entity.
func (au *AccountsUpdate) AddFromAccountID(t ...*Transfers) *AccountsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddFromAccountIDIDs(ids...)
}

// AddToAccountIDIDs adds the "to_account_id" edge to the Transfers entity by IDs.
func (au *AccountsUpdate) AddToAccountIDIDs(ids ...int) *AccountsUpdate {
	au.mutation.AddToAccountIDIDs(ids...)
	return au
}

// AddToAccountID adds the "to_account_id" edges to the Transfers entity.
func (au *AccountsUpdate) AddToAccountID(t ...*Transfers) *AccountsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddToAccountIDIDs(ids...)
}

// Mutation returns the AccountsMutation object of the builder.
func (au *AccountsUpdate) Mutation() *AccountsMutation {
	return au.mutation
}

// ClearFromAccountID clears all "from_account_id" edges to the Transfers entity.
func (au *AccountsUpdate) ClearFromAccountID() *AccountsUpdate {
	au.mutation.ClearFromAccountID()
	return au
}

// RemoveFromAccountIDIDs removes the "from_account_id" edge to Transfers entities by IDs.
func (au *AccountsUpdate) RemoveFromAccountIDIDs(ids ...int) *AccountsUpdate {
	au.mutation.RemoveFromAccountIDIDs(ids...)
	return au
}

// RemoveFromAccountID removes "from_account_id" edges to Transfers entities.
func (au *AccountsUpdate) RemoveFromAccountID(t ...*Transfers) *AccountsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveFromAccountIDIDs(ids...)
}

// ClearToAccountID clears all "to_account_id" edges to the Transfers entity.
func (au *AccountsUpdate) ClearToAccountID() *AccountsUpdate {
	au.mutation.ClearToAccountID()
	return au
}

// RemoveToAccountIDIDs removes the "to_account_id" edge to Transfers entities by IDs.
func (au *AccountsUpdate) RemoveToAccountIDIDs(ids ...int) *AccountsUpdate {
	au.mutation.RemoveToAccountIDIDs(ids...)
	return au
}

// RemoveToAccountID removes "to_account_id" edges to Transfers entities.
func (au *AccountsUpdate) RemoveToAccountID(t ...*Transfers) *AccountsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveToAccountIDIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AccountsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccountsUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccountsUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccountsUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AccountsUpdate) check() error {
	if v, ok := au.mutation.Owner(); ok {
		if err := accounts.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf("ent: validator failed for field \"owner\": %w", err)}
		}
	}
	if v, ok := au.mutation.Balance(); ok {
		if err := accounts.BalanceValidator(v); err != nil {
			return &ValidationError{Name: "balance", err: fmt.Errorf("ent: validator failed for field \"balance\": %w", err)}
		}
	}
	if v, ok := au.mutation.Currency(); ok {
		if err := accounts.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf("ent: validator failed for field \"currency\": %w", err)}
		}
	}
	return nil
}

func (au *AccountsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accounts.Table,
			Columns: accounts.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accounts.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accounts.FieldOwner,
		})
	}
	if value, ok := au.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: accounts.FieldBalance,
		})
	}
	if value, ok := au.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: accounts.FieldBalance,
		})
	}
	if value, ok := au.mutation.Currency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accounts.FieldCurrency,
		})
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accounts.FieldCreatedAt,
		})
	}
	if au.mutation.FromAccountIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.FromAccountIDTable,
			Columns: []string{accounts.FromAccountIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transfers.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedFromAccountIDIDs(); len(nodes) > 0 && !au.mutation.FromAccountIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.FromAccountIDTable,
			Columns: []string{accounts.FromAccountIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transfers.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.FromAccountIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.FromAccountIDTable,
			Columns: []string{accounts.FromAccountIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transfers.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ToAccountIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.ToAccountIDTable,
			Columns: []string{accounts.ToAccountIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transfers.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedToAccountIDIDs(); len(nodes) > 0 && !au.mutation.ToAccountIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.ToAccountIDTable,
			Columns: []string{accounts.ToAccountIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transfers.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ToAccountIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.ToAccountIDTable,
			Columns: []string{accounts.ToAccountIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transfers.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accounts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AccountsUpdateOne is the builder for updating a single Accounts entity.
type AccountsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountsMutation
}

// SetOwner sets the "owner" field.
func (auo *AccountsUpdateOne) SetOwner(s string) *AccountsUpdateOne {
	auo.mutation.SetOwner(s)
	return auo
}

// SetBalance sets the "balance" field.
func (auo *AccountsUpdateOne) SetBalance(i int64) *AccountsUpdateOne {
	auo.mutation.ResetBalance()
	auo.mutation.SetBalance(i)
	return auo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (auo *AccountsUpdateOne) SetNillableBalance(i *int64) *AccountsUpdateOne {
	if i != nil {
		auo.SetBalance(*i)
	}
	return auo
}

// AddBalance adds i to the "balance" field.
func (auo *AccountsUpdateOne) AddBalance(i int64) *AccountsUpdateOne {
	auo.mutation.AddBalance(i)
	return auo
}

// SetCurrency sets the "currency" field.
func (auo *AccountsUpdateOne) SetCurrency(s string) *AccountsUpdateOne {
	auo.mutation.SetCurrency(s)
	return auo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (auo *AccountsUpdateOne) SetNillableCurrency(s *string) *AccountsUpdateOne {
	if s != nil {
		auo.SetCurrency(*s)
	}
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *AccountsUpdateOne) SetCreatedAt(t time.Time) *AccountsUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AccountsUpdateOne) SetNillableCreatedAt(t *time.Time) *AccountsUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// AddFromAccountIDIDs adds the "from_account_id" edge to the Transfers entity by IDs.
func (auo *AccountsUpdateOne) AddFromAccountIDIDs(ids ...int) *AccountsUpdateOne {
	auo.mutation.AddFromAccountIDIDs(ids...)
	return auo
}

// AddFromAccountID adds the "from_account_id" edges to the Transfers entity.
func (auo *AccountsUpdateOne) AddFromAccountID(t ...*Transfers) *AccountsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddFromAccountIDIDs(ids...)
}

// AddToAccountIDIDs adds the "to_account_id" edge to the Transfers entity by IDs.
func (auo *AccountsUpdateOne) AddToAccountIDIDs(ids ...int) *AccountsUpdateOne {
	auo.mutation.AddToAccountIDIDs(ids...)
	return auo
}

// AddToAccountID adds the "to_account_id" edges to the Transfers entity.
func (auo *AccountsUpdateOne) AddToAccountID(t ...*Transfers) *AccountsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddToAccountIDIDs(ids...)
}

// Mutation returns the AccountsMutation object of the builder.
func (auo *AccountsUpdateOne) Mutation() *AccountsMutation {
	return auo.mutation
}

// ClearFromAccountID clears all "from_account_id" edges to the Transfers entity.
func (auo *AccountsUpdateOne) ClearFromAccountID() *AccountsUpdateOne {
	auo.mutation.ClearFromAccountID()
	return auo
}

// RemoveFromAccountIDIDs removes the "from_account_id" edge to Transfers entities by IDs.
func (auo *AccountsUpdateOne) RemoveFromAccountIDIDs(ids ...int) *AccountsUpdateOne {
	auo.mutation.RemoveFromAccountIDIDs(ids...)
	return auo
}

// RemoveFromAccountID removes "from_account_id" edges to Transfers entities.
func (auo *AccountsUpdateOne) RemoveFromAccountID(t ...*Transfers) *AccountsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveFromAccountIDIDs(ids...)
}

// ClearToAccountID clears all "to_account_id" edges to the Transfers entity.
func (auo *AccountsUpdateOne) ClearToAccountID() *AccountsUpdateOne {
	auo.mutation.ClearToAccountID()
	return auo
}

// RemoveToAccountIDIDs removes the "to_account_id" edge to Transfers entities by IDs.
func (auo *AccountsUpdateOne) RemoveToAccountIDIDs(ids ...int) *AccountsUpdateOne {
	auo.mutation.RemoveToAccountIDIDs(ids...)
	return auo
}

// RemoveToAccountID removes "to_account_id" edges to Transfers entities.
func (auo *AccountsUpdateOne) RemoveToAccountID(t ...*Transfers) *AccountsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveToAccountIDIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AccountsUpdateOne) Select(field string, fields ...string) *AccountsUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Accounts entity.
func (auo *AccountsUpdateOne) Save(ctx context.Context) (*Accounts, error) {
	var (
		err  error
		node *Accounts
	)
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccountsUpdateOne) SaveX(ctx context.Context) *Accounts {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AccountsUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccountsUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AccountsUpdateOne) check() error {
	if v, ok := auo.mutation.Owner(); ok {
		if err := accounts.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf("ent: validator failed for field \"owner\": %w", err)}
		}
	}
	if v, ok := auo.mutation.Balance(); ok {
		if err := accounts.BalanceValidator(v); err != nil {
			return &ValidationError{Name: "balance", err: fmt.Errorf("ent: validator failed for field \"balance\": %w", err)}
		}
	}
	if v, ok := auo.mutation.Currency(); ok {
		if err := accounts.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf("ent: validator failed for field \"currency\": %w", err)}
		}
	}
	return nil
}

func (auo *AccountsUpdateOne) sqlSave(ctx context.Context) (_node *Accounts, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accounts.Table,
			Columns: accounts.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accounts.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Accounts.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accounts.FieldID)
		for _, f := range fields {
			if !accounts.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accounts.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accounts.FieldOwner,
		})
	}
	if value, ok := auo.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: accounts.FieldBalance,
		})
	}
	if value, ok := auo.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: accounts.FieldBalance,
		})
	}
	if value, ok := auo.mutation.Currency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accounts.FieldCurrency,
		})
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accounts.FieldCreatedAt,
		})
	}
	if auo.mutation.FromAccountIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.FromAccountIDTable,
			Columns: []string{accounts.FromAccountIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transfers.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedFromAccountIDIDs(); len(nodes) > 0 && !auo.mutation.FromAccountIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.FromAccountIDTable,
			Columns: []string{accounts.FromAccountIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transfers.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.FromAccountIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.FromAccountIDTable,
			Columns: []string{accounts.FromAccountIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transfers.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ToAccountIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.ToAccountIDTable,
			Columns: []string{accounts.ToAccountIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transfers.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedToAccountIDIDs(); len(nodes) > 0 && !auo.mutation.ToAccountIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.ToAccountIDTable,
			Columns: []string{accounts.ToAccountIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transfers.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ToAccountIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.ToAccountIDTable,
			Columns: []string{accounts.ToAccountIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transfers.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Accounts{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accounts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

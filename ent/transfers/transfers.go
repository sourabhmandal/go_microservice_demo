// Code generated by entc, DO NOT EDIT.

package transfers

import (
	"time"
)

const (
	// Label holds the string label denoting the transfers type in the database.
	Label = "transfers"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFromAccountID holds the string denoting the from_account_id field in the database.
	FieldFromAccountID = "from_account_id"
	// FieldToAccountID holds the string denoting the to_account_id field in the database.
	FieldToAccountID = "to_account_id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeAccountOf holds the string denoting the account_of edge name in mutations.
	EdgeAccountOf = "account_of"
	// EdgeAccountTo holds the string denoting the account_to edge name in mutations.
	EdgeAccountTo = "account_to"
	// Table holds the table name of the transfers in the database.
	Table = "transfers"
	// AccountOfTable is the table that holds the account_of relation/edge.
	AccountOfTable = "transfers"
	// AccountOfInverseTable is the table name for the Accounts entity.
	// It exists in this package in order to avoid circular dependency with the "accounts" package.
	AccountOfInverseTable = "accounts"
	// AccountOfColumn is the table column denoting the account_of relation/edge.
	AccountOfColumn = "accounts_from_account_id"
	// AccountToTable is the table that holds the account_to relation/edge.
	AccountToTable = "transfers"
	// AccountToInverseTable is the table name for the Accounts entity.
	// It exists in this package in order to avoid circular dependency with the "accounts" package.
	AccountToInverseTable = "accounts"
	// AccountToColumn is the table column denoting the account_to relation/edge.
	AccountToColumn = "accounts_to_account_id"
)

// Columns holds all SQL columns for transfers fields.
var Columns = []string{
	FieldID,
	FieldFromAccountID,
	FieldToAccountID,
	FieldAmount,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "transfers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"accounts_from_account_id",
	"accounts_to_account_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// FromAccountIDValidator is a validator for the "from_account_id" field. It is called by the builders before save.
	FromAccountIDValidator func(int) error
	// ToAccountIDValidator is a validator for the "to_account_id" field. It is called by the builders before save.
	ToAccountIDValidator func(int) error
	// DefaultAmount holds the default value on creation for the "amount" field.
	DefaultAmount int64
	// AmountValidator is a validator for the "amount" field. It is called by the builders before save.
	AmountValidator func(int64) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gomicro/ent/accounts"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Accounts is the model entity for the Accounts schema.
type Accounts struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner string `json:"owner,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance int64 `json:"balance,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Accounts) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case accounts.FieldID, accounts.FieldBalance:
			values[i] = new(sql.NullInt64)
		case accounts.FieldOwner, accounts.FieldCurrency:
			values[i] = new(sql.NullString)
		case accounts.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Accounts", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Accounts fields.
func (a *Accounts) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accounts.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case accounts.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				a.Owner = value.String
			}
		case accounts.FieldBalance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				a.Balance = value.Int64
			}
		case accounts.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				a.Currency = value.String
			}
		case accounts.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Accounts.
// Note that you need to call Accounts.Unwrap() before calling this method if this Accounts
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Accounts) Update() *AccountsUpdateOne {
	return (&AccountsClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Accounts entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Accounts) Unwrap() *Accounts {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Accounts is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Accounts) String() string {
	var builder strings.Builder
	builder.WriteString("Accounts(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", owner=")
	builder.WriteString(a.Owner)
	builder.WriteString(", balance=")
	builder.WriteString(fmt.Sprintf("%v", a.Balance))
	builder.WriteString(", currency=")
	builder.WriteString(a.Currency)
	builder.WriteString(", created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AccountsSlice is a parsable slice of Accounts.
type AccountsSlice []*Accounts

func (a AccountsSlice) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}

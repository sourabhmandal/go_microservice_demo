// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gomicro/ent/accounts"
	"gomicro/ent/predicate"
	"gomicro/ent/transfers"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransfersUpdate is the builder for updating Transfers entities.
type TransfersUpdate struct {
	config
	hooks    []Hook
	mutation *TransfersMutation
}

// Where appends a list predicates to the TransfersUpdate builder.
func (tu *TransfersUpdate) Where(ps ...predicate.Transfers) *TransfersUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetFromAccountID sets the "from_account_id" field.
func (tu *TransfersUpdate) SetFromAccountID(i int) *TransfersUpdate {
	tu.mutation.ResetFromAccountID()
	tu.mutation.SetFromAccountID(i)
	return tu
}

// AddFromAccountID adds i to the "from_account_id" field.
func (tu *TransfersUpdate) AddFromAccountID(i int) *TransfersUpdate {
	tu.mutation.AddFromAccountID(i)
	return tu
}

// SetToAccountID sets the "to_account_id" field.
func (tu *TransfersUpdate) SetToAccountID(i int) *TransfersUpdate {
	tu.mutation.ResetToAccountID()
	tu.mutation.SetToAccountID(i)
	return tu
}

// AddToAccountID adds i to the "to_account_id" field.
func (tu *TransfersUpdate) AddToAccountID(i int) *TransfersUpdate {
	tu.mutation.AddToAccountID(i)
	return tu
}

// SetAmount sets the "amount" field.
func (tu *TransfersUpdate) SetAmount(i int64) *TransfersUpdate {
	tu.mutation.ResetAmount()
	tu.mutation.SetAmount(i)
	return tu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tu *TransfersUpdate) SetNillableAmount(i *int64) *TransfersUpdate {
	if i != nil {
		tu.SetAmount(*i)
	}
	return tu
}

// AddAmount adds i to the "amount" field.
func (tu *TransfersUpdate) AddAmount(i int64) *TransfersUpdate {
	tu.mutation.AddAmount(i)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TransfersUpdate) SetCreatedAt(t time.Time) *TransfersUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TransfersUpdate) SetNillableCreatedAt(t *time.Time) *TransfersUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetAccountOfID sets the "account_of" edge to the Accounts entity by ID.
func (tu *TransfersUpdate) SetAccountOfID(id int) *TransfersUpdate {
	tu.mutation.SetAccountOfID(id)
	return tu
}

// SetNillableAccountOfID sets the "account_of" edge to the Accounts entity by ID if the given value is not nil.
func (tu *TransfersUpdate) SetNillableAccountOfID(id *int) *TransfersUpdate {
	if id != nil {
		tu = tu.SetAccountOfID(*id)
	}
	return tu
}

// SetAccountOf sets the "account_of" edge to the Accounts entity.
func (tu *TransfersUpdate) SetAccountOf(a *Accounts) *TransfersUpdate {
	return tu.SetAccountOfID(a.ID)
}

// SetAccountToID sets the "account_to" edge to the Accounts entity by ID.
func (tu *TransfersUpdate) SetAccountToID(id int) *TransfersUpdate {
	tu.mutation.SetAccountToID(id)
	return tu
}

// SetNillableAccountToID sets the "account_to" edge to the Accounts entity by ID if the given value is not nil.
func (tu *TransfersUpdate) SetNillableAccountToID(id *int) *TransfersUpdate {
	if id != nil {
		tu = tu.SetAccountToID(*id)
	}
	return tu
}

// SetAccountTo sets the "account_to" edge to the Accounts entity.
func (tu *TransfersUpdate) SetAccountTo(a *Accounts) *TransfersUpdate {
	return tu.SetAccountToID(a.ID)
}

// Mutation returns the TransfersMutation object of the builder.
func (tu *TransfersUpdate) Mutation() *TransfersMutation {
	return tu.mutation
}

// ClearAccountOf clears the "account_of" edge to the Accounts entity.
func (tu *TransfersUpdate) ClearAccountOf() *TransfersUpdate {
	tu.mutation.ClearAccountOf()
	return tu
}

// ClearAccountTo clears the "account_to" edge to the Accounts entity.
func (tu *TransfersUpdate) ClearAccountTo() *TransfersUpdate {
	tu.mutation.ClearAccountTo()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransfersUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransfersMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransfersUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransfersUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransfersUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TransfersUpdate) check() error {
	if v, ok := tu.mutation.FromAccountID(); ok {
		if err := transfers.FromAccountIDValidator(v); err != nil {
			return &ValidationError{Name: "from_account_id", err: fmt.Errorf("ent: validator failed for field \"from_account_id\": %w", err)}
		}
	}
	if v, ok := tu.mutation.ToAccountID(); ok {
		if err := transfers.ToAccountIDValidator(v); err != nil {
			return &ValidationError{Name: "to_account_id", err: fmt.Errorf("ent: validator failed for field \"to_account_id\": %w", err)}
		}
	}
	if v, ok := tu.mutation.Amount(); ok {
		if err := transfers.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf("ent: validator failed for field \"amount\": %w", err)}
		}
	}
	return nil
}

func (tu *TransfersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transfers.Table,
			Columns: transfers.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transfers.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.FromAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transfers.FieldFromAccountID,
		})
	}
	if value, ok := tu.mutation.AddedFromAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transfers.FieldFromAccountID,
		})
	}
	if value, ok := tu.mutation.ToAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transfers.FieldToAccountID,
		})
	}
	if value, ok := tu.mutation.AddedToAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transfers.FieldToAccountID,
		})
	}
	if value, ok := tu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: transfers.FieldAmount,
		})
	}
	if value, ok := tu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: transfers.FieldAmount,
		})
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transfers.FieldCreatedAt,
		})
	}
	if tu.mutation.AccountOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfers.AccountOfTable,
			Columns: []string{transfers.AccountOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accounts.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AccountOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfers.AccountOfTable,
			Columns: []string{transfers.AccountOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accounts.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.AccountToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfers.AccountToTable,
			Columns: []string{transfers.AccountToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accounts.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AccountToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfers.AccountToTable,
			Columns: []string{transfers.AccountToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accounts.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TransfersUpdateOne is the builder for updating a single Transfers entity.
type TransfersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransfersMutation
}

// SetFromAccountID sets the "from_account_id" field.
func (tuo *TransfersUpdateOne) SetFromAccountID(i int) *TransfersUpdateOne {
	tuo.mutation.ResetFromAccountID()
	tuo.mutation.SetFromAccountID(i)
	return tuo
}

// AddFromAccountID adds i to the "from_account_id" field.
func (tuo *TransfersUpdateOne) AddFromAccountID(i int) *TransfersUpdateOne {
	tuo.mutation.AddFromAccountID(i)
	return tuo
}

// SetToAccountID sets the "to_account_id" field.
func (tuo *TransfersUpdateOne) SetToAccountID(i int) *TransfersUpdateOne {
	tuo.mutation.ResetToAccountID()
	tuo.mutation.SetToAccountID(i)
	return tuo
}

// AddToAccountID adds i to the "to_account_id" field.
func (tuo *TransfersUpdateOne) AddToAccountID(i int) *TransfersUpdateOne {
	tuo.mutation.AddToAccountID(i)
	return tuo
}

// SetAmount sets the "amount" field.
func (tuo *TransfersUpdateOne) SetAmount(i int64) *TransfersUpdateOne {
	tuo.mutation.ResetAmount()
	tuo.mutation.SetAmount(i)
	return tuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tuo *TransfersUpdateOne) SetNillableAmount(i *int64) *TransfersUpdateOne {
	if i != nil {
		tuo.SetAmount(*i)
	}
	return tuo
}

// AddAmount adds i to the "amount" field.
func (tuo *TransfersUpdateOne) AddAmount(i int64) *TransfersUpdateOne {
	tuo.mutation.AddAmount(i)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TransfersUpdateOne) SetCreatedAt(t time.Time) *TransfersUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TransfersUpdateOne) SetNillableCreatedAt(t *time.Time) *TransfersUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetAccountOfID sets the "account_of" edge to the Accounts entity by ID.
func (tuo *TransfersUpdateOne) SetAccountOfID(id int) *TransfersUpdateOne {
	tuo.mutation.SetAccountOfID(id)
	return tuo
}

// SetNillableAccountOfID sets the "account_of" edge to the Accounts entity by ID if the given value is not nil.
func (tuo *TransfersUpdateOne) SetNillableAccountOfID(id *int) *TransfersUpdateOne {
	if id != nil {
		tuo = tuo.SetAccountOfID(*id)
	}
	return tuo
}

// SetAccountOf sets the "account_of" edge to the Accounts entity.
func (tuo *TransfersUpdateOne) SetAccountOf(a *Accounts) *TransfersUpdateOne {
	return tuo.SetAccountOfID(a.ID)
}

// SetAccountToID sets the "account_to" edge to the Accounts entity by ID.
func (tuo *TransfersUpdateOne) SetAccountToID(id int) *TransfersUpdateOne {
	tuo.mutation.SetAccountToID(id)
	return tuo
}

// SetNillableAccountToID sets the "account_to" edge to the Accounts entity by ID if the given value is not nil.
func (tuo *TransfersUpdateOne) SetNillableAccountToID(id *int) *TransfersUpdateOne {
	if id != nil {
		tuo = tuo.SetAccountToID(*id)
	}
	return tuo
}

// SetAccountTo sets the "account_to" edge to the Accounts entity.
func (tuo *TransfersUpdateOne) SetAccountTo(a *Accounts) *TransfersUpdateOne {
	return tuo.SetAccountToID(a.ID)
}

// Mutation returns the TransfersMutation object of the builder.
func (tuo *TransfersUpdateOne) Mutation() *TransfersMutation {
	return tuo.mutation
}

// ClearAccountOf clears the "account_of" edge to the Accounts entity.
func (tuo *TransfersUpdateOne) ClearAccountOf() *TransfersUpdateOne {
	tuo.mutation.ClearAccountOf()
	return tuo
}

// ClearAccountTo clears the "account_to" edge to the Accounts entity.
func (tuo *TransfersUpdateOne) ClearAccountTo() *TransfersUpdateOne {
	tuo.mutation.ClearAccountTo()
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransfersUpdateOne) Select(field string, fields ...string) *TransfersUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transfers entity.
func (tuo *TransfersUpdateOne) Save(ctx context.Context) (*Transfers, error) {
	var (
		err  error
		node *Transfers
	)
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransfersMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransfersUpdateOne) SaveX(ctx context.Context) *Transfers {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransfersUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransfersUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TransfersUpdateOne) check() error {
	if v, ok := tuo.mutation.FromAccountID(); ok {
		if err := transfers.FromAccountIDValidator(v); err != nil {
			return &ValidationError{Name: "from_account_id", err: fmt.Errorf("ent: validator failed for field \"from_account_id\": %w", err)}
		}
	}
	if v, ok := tuo.mutation.ToAccountID(); ok {
		if err := transfers.ToAccountIDValidator(v); err != nil {
			return &ValidationError{Name: "to_account_id", err: fmt.Errorf("ent: validator failed for field \"to_account_id\": %w", err)}
		}
	}
	if v, ok := tuo.mutation.Amount(); ok {
		if err := transfers.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf("ent: validator failed for field \"amount\": %w", err)}
		}
	}
	return nil
}

func (tuo *TransfersUpdateOne) sqlSave(ctx context.Context) (_node *Transfers, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transfers.Table,
			Columns: transfers.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transfers.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Transfers.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transfers.FieldID)
		for _, f := range fields {
			if !transfers.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transfers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.FromAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transfers.FieldFromAccountID,
		})
	}
	if value, ok := tuo.mutation.AddedFromAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transfers.FieldFromAccountID,
		})
	}
	if value, ok := tuo.mutation.ToAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transfers.FieldToAccountID,
		})
	}
	if value, ok := tuo.mutation.AddedToAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transfers.FieldToAccountID,
		})
	}
	if value, ok := tuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: transfers.FieldAmount,
		})
	}
	if value, ok := tuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: transfers.FieldAmount,
		})
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transfers.FieldCreatedAt,
		})
	}
	if tuo.mutation.AccountOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfers.AccountOfTable,
			Columns: []string{transfers.AccountOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accounts.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AccountOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfers.AccountOfTable,
			Columns: []string{transfers.AccountOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accounts.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.AccountToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfers.AccountToTable,
			Columns: []string{transfers.AccountToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accounts.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AccountToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfers.AccountToTable,
			Columns: []string{transfers.AccountToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accounts.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transfers{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

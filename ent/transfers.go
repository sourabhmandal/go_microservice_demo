// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gomicro/ent/accounts"
	"gomicro/ent/transfers"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Transfers is the model entity for the Transfers schema.
type Transfers struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FromAccountID holds the value of the "from_account_id" field.
	FromAccountID int `json:"from_account_id,omitempty"`
	// ToAccountID holds the value of the "to_account_id" field.
	ToAccountID int `json:"to_account_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int64 `json:"amount,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransfersQuery when eager-loading is set.
	Edges                    TransfersEdges `json:"edges"`
	accounts_from_account_id *int
	accounts_to_account_id   *int
}

// TransfersEdges holds the relations/edges for other nodes in the graph.
type TransfersEdges struct {
	// AccountOf holds the value of the account_of edge.
	AccountOf *Accounts `json:"account_of,omitempty"`
	// AccountTo holds the value of the account_to edge.
	AccountTo *Accounts `json:"account_to,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AccountOfOrErr returns the AccountOf value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransfersEdges) AccountOfOrErr() (*Accounts, error) {
	if e.loadedTypes[0] {
		if e.AccountOf == nil {
			// The edge account_of was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: accounts.Label}
		}
		return e.AccountOf, nil
	}
	return nil, &NotLoadedError{edge: "account_of"}
}

// AccountToOrErr returns the AccountTo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransfersEdges) AccountToOrErr() (*Accounts, error) {
	if e.loadedTypes[1] {
		if e.AccountTo == nil {
			// The edge account_to was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: accounts.Label}
		}
		return e.AccountTo, nil
	}
	return nil, &NotLoadedError{edge: "account_to"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transfers) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case transfers.FieldID, transfers.FieldFromAccountID, transfers.FieldToAccountID, transfers.FieldAmount:
			values[i] = new(sql.NullInt64)
		case transfers.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case transfers.ForeignKeys[0]: // accounts_from_account_id
			values[i] = new(sql.NullInt64)
		case transfers.ForeignKeys[1]: // accounts_to_account_id
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Transfers", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transfers fields.
func (t *Transfers) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transfers.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case transfers.FieldFromAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_account_id", values[i])
			} else if value.Valid {
				t.FromAccountID = int(value.Int64)
			}
		case transfers.FieldToAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field to_account_id", values[i])
			} else if value.Valid {
				t.ToAccountID = int(value.Int64)
			}
		case transfers.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				t.Amount = value.Int64
			}
		case transfers.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case transfers.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field accounts_from_account_id", value)
			} else if value.Valid {
				t.accounts_from_account_id = new(int)
				*t.accounts_from_account_id = int(value.Int64)
			}
		case transfers.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field accounts_to_account_id", value)
			} else if value.Valid {
				t.accounts_to_account_id = new(int)
				*t.accounts_to_account_id = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAccountOf queries the "account_of" edge of the Transfers entity.
func (t *Transfers) QueryAccountOf() *AccountsQuery {
	return (&TransfersClient{config: t.config}).QueryAccountOf(t)
}

// QueryAccountTo queries the "account_to" edge of the Transfers entity.
func (t *Transfers) QueryAccountTo() *AccountsQuery {
	return (&TransfersClient{config: t.config}).QueryAccountTo(t)
}

// Update returns a builder for updating this Transfers.
// Note that you need to call Transfers.Unwrap() before calling this method if this Transfers
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transfers) Update() *TransfersUpdateOne {
	return (&TransfersClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Transfers entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transfers) Unwrap() *Transfers {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transfers is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transfers) String() string {
	var builder strings.Builder
	builder.WriteString("Transfers(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", from_account_id=")
	builder.WriteString(fmt.Sprintf("%v", t.FromAccountID))
	builder.WriteString(", to_account_id=")
	builder.WriteString(fmt.Sprintf("%v", t.ToAccountID))
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", t.Amount))
	builder.WriteString(", created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TransfersSlice is a parsable slice of Transfers.
type TransfersSlice []*Transfers

func (t TransfersSlice) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
